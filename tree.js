// Generated by CoffeeScript 1.7.1
(function() {
  var hash;

  hash = require('./hash');

  exports.Committer = (function() {
    function Committer(vals, alg) {
      var c, i;
      this.vals = vals;
      this.alg = alg != null ? alg : 'sha256';
      c = Math.pow(2, Math.ceil(Math.log(this.vals.length) / Math.log(2)));
      c = c - this.vals.length;
      i = 0;
      while (i !== c) {
        this.vals.push('0000000000');
        ++i;
      }
      i = 0;
      while (i !== this.vals.length) {
        this.vals[i] = hash.chain(this.vals[i], 1, this.alg);
        ++i;
      }
    }

    Committer.prototype.getCommit = function() {
      var i, lvl, tmp, v, _ref;
      lvl = this.vals;
      while (lvl.length !== 1) {
        _ref = [0, []], i = _ref[0], tmp = _ref[1];
        while (i !== lvl.length) {
          v = hash.chain(lvl[i].toString() + lvl[i + 1].toString(), 1, this.alg);
          tmp.push(v);
          i = i + 2;
        }
        lvl = tmp;
      }
      return lvl[0];
    };

    Committer.prototype.getProof = function(j) {
      var i, lvl, proof, tmp, v, _ref, _ref1;
      _ref = [this.vals, []], lvl = _ref[0], proof = _ref[1];
      while (lvl.length !== 1) {
        _ref1 = [0, []], i = _ref1[0], tmp = _ref1[1];
        while (i !== lvl.length) {
          if (i === j) {
            proof.push([1, lvl[i + 1]]);
          }
          if ((i + 1) === j) {
            proof.push([0, lvl[i]]);
          }
          if (i === j || (i + 1) === j) {
            j = Math.floor(j / 2);
          }
          v = hash.chain(lvl[i].toString() + lvl[i + 1].toString(), 1, this.alg);
          tmp.push(v);
          i = i + 2;
        }
        lvl = tmp;
      }
      return proof;
    };

    return Committer;

  })();

  exports.forward = function(val, proof, alg) {
    var v, _i, _len;
    if (alg == null) {
      alg = 'sha256';
    }
    val = hash.chain(val, 1, alg);
    for (_i = 0, _len = proof.length; _i < _len; _i++) {
      v = proof[_i];
      if (v[0] === 0) {
        val = hash.chain(v[1].toString() + val.toString(), 1, alg);
      } else {
        val = hash.chain(val.toString() + v[1].toString(), 1, alg);
      }
    }
    return val;
  };

  exports.verify = function(commitment, val, proof, alg) {
    if (alg == null) {
      alg = 'sha256';
    }
    val = exports.forward(val, proof, alg);
    return val.toString() === commitment.toString();
  };

}).call(this);
